#!/bin/bash

## scATAC-pro           



#########################
## usage ####
#########################                                                                   

SOFT="scATAC-pro"
VERSION="1.0.0"

function usage {
    echo -e "usage : $SOFT -s STEP -i INPUT -c CONFIG [-p] [-h] [-v]"
    echo -e "Use option -h|--help for more information"

    if [[ ! -e ${CONFIG} ]]; then
	echo "Error - configure file not detected."
	exit -1
    fi
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}


function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

#####################
## Set PATHS ##
#####################

SOFT_PATH=`dirname $0`
ABS_SOFT_PATH=`cd "$SOFT_PATH"; pwd`
SCRIPTS_PATH="$ABS_SOFT_PATH/scripts"
CUR_PATH=$PWD

CLUSTER=0
MAKE_OPTS=""
STEP=""
INPUT=""
OUTPUT_DIR="output"
CONF="configure.txt"





#####################
## Inputs
#####################
if [ $# -lt 1 ]
then
    usage
    exit
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--step")   set -- "$@" "-s" ;;
      "--input") set -- "$@" "-i" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--parallel")   set -- "$@" "-p" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts ":s:i:c:p:v:h" OPT
do
    case $OPT in
	s) STEP=$OPTARG;;
	i) INPUT=$OPTARG;;
	c) CONFIG=$OPTARG;;
	p) CLUSTER=1 ;;
	v) version ;;
	h) help ;;
	\?)
	     echo "Invalid option: -$OPTARG" >&2
	     usage
	     exit 1
	     ;;
	 :)
	     echo "Option -$OPTARG requires an argument." >&2
	     usage
	     exit 1
	     ;;
    esac
done



if [[ -z $INPUT || -z $CONFIG ]]; then
    usage
    exit
fi


################################ check valid STEPs #####
############################
AVAILABLE_STEP_ARRAY=("demplx_fastq" "trimming" "mapping" "generate_signal" "call_peak" "get_mtx" "qc_per_barcode" "call_cell" "clustering" "motif_analysis" "split_bam" "footprint" "report", "preprocess", "downstream", "all")


check_s=0
for i in ${AVAILABLE_STEP_ARRAY[@]}; do
	    if [[ "$i" == "$STEP" ]]; then check_s=1; fi
done


if [[ $check_s == 0 ]]; then die "Unknown STEP option (\"-s $s\"). Use $0 --help for usage information."; fi


############################
## make output_dir
############################



#cd $OUTPUT_DIR

if [ $CLUSTER == 0 ]; then
    echo "Run scATAC-pro "${VERSION}

fi



###################################################
## provided through user specified configure file
###################################################


source $CONFIG


mkdir -p $OUTPUT_DIR

###################################################
##Run scATAC-pro
###################################################

#make --file ${SCRIPTS_PATH}/Makefile INPUT_FILE=$INPUT OUTPUT_DIR=$OUTPUT_DIR $STEP 2>&1
logDir=${OUTPUT_DIR}/logs
mkdir -p $logDir
make --file ${SCRIPTS_PATH}/Makefile INPUT_FILE=$INPUT CONFIG_FILE=$CONFIG $STEP > ${logDir}/$STEP.log 2>&1



