#!/bin/bash

## scATAC-pro           



#########################
## usage ####
#########################                                                                   

SOFT="scATAC-pro"
VERSION="1.0.0"

function usage {
    echo -e "usage : YOUR_INSTALL_PATH/${SOFT}_${VERSION}/$SOFT -s STEP -i INPUT -c CONFIG [-o] [-p] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo 
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   [-s|--step ANALYSIS_STEP] : run a step (or combinatorial steps) of the $SOFT workflow, supportting steps:"
    echo "      dex_fastq: perform demultiplexing
                           input: fastq files for both reads and index, separated by comma like:
                                  fastq1,fastq2,index_fastq1,index_fastq2, index_fastq3...;
                           output: demultiplexed fastq1 and fastq2 files "
    echo "      mapping: perform reads alignment
                         input: fastq files, separated by comma for each paired end
                         output: position sorted bam file and mapping qc stat"
    echo "      call_peak: call peaks for aggregated data
                           input: BAM file
                           output: peaks in bed file format"
    echo "      get_mtx: build raw peak by barcode matrix
                         input: BAM file
                         output: fragment.bed file and sparse matrix in Matrix Market format"
    echo "      aggr_signal: generate aggregated signal, which can be upload to and view
                             in genome browser
                             input: require BAM files
                             output: bw and bedgraph file"
    echo "      qc_per_barcode: quality control per barcode
                                input: fragment.bed file
                                output: qc_per_barcode.summary"
    echo "      preprocess: perform preprocessing - including dex_fastq, mapping, call_peak, get_mtx,
                            aggr_signal, qc_per_barcode abd call_cell
                            input: fastq files for both reads and index, separated by comma like:
                                   fastq1,fastq2,index_fastq1,index_fastq2, index_fastq3...; 
                            output: cell peak matrix and all intermediate results "
    echo "      call_cell: cell calling
                           input: raw peak barcode sparse matrix file
                           output: filtered peak by cell matrix"
    echo "      clustering: cell clustering
                           input: filtered peak by cell matrix file
                           output: seurat objects with clustering label in the metadata (.rds file) and 
                                   barcodes with cluster labels (bed file)"
    echo "      motif_analysis: doing motif analysis
                           input: filtered peak by cell matrix file
                           output: TF by cell matrix indicating TF accessibility (chromVAR object)"
    echo "      split_bam: split bam file into different clusters
                           input: barcodes with cluster label (bed file)
                           output: footprint summary statistics (hint output)"
    echo "      footprint: doing footprinting analysis
                           input: bam files of two clusters, separated by comma like, bam1,bam2
                           output: footprint summary statistics (hint output)"
    echo "      downstream: do all downstream analysis, including clustering, motif_analysis, 
                            split_bam (optional) and footprinting analysis (optional)
                            input: sparse matrix file
                            output: seurat object (in .rds format), differential TF accessibility score matrix
                                    and footprint summary"
    echo "      report: generate report in html file
                        input: directory to output report
                        output: summary report in html format"
    echo "   -i|--input INPUT : input data, different types of input data are required for different steps;"
    echo "   -c|--conf CONFIG : configuration file for parameters (if exists) for each step"
    echo "   [-o|--output_dir : folder to save results; sub-folder will be created automatically for each step"
    echo "   [-p|--parallel] : if specified run $SOFT on a cluster"
    echo "   [-h|--help]: help"
    echo "   [-v|--version]: version"
    exit;
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}


function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

#####################
## Set PATHS and defaults
#####################

SOFT_PATH=`dirname $0`
ABS_SOFT_PATH=`cd "$SOFT_PATH"; pwd`
SCRIPTS_PATH="$ABS_SOFT_PATH/scripts"
CUR_PATH=$PWD

CLUSTER=0
MAKE_OPTS=""
STEP=""
INPUT=""
OUTPUT_DIR="output"
CONF="configure_user.txt"





#####################
## Inputs
#####################
if [ $# -lt 1 ]
then
    usage
    exit
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--step")   set -- "$@" "-s" ;;
      "--input") set -- "$@" "-i" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--output_dir")   set -- "$@" "-o" ;;
      "--parallel")   set -- "$@" "-p" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts ":s:i:c:o:p:vh" OPT
do
    case $OPT in
	s) STEP=$OPTARG;;
	i) INPUT=$OPTARG;;
	c) CONFIG=$OPTARG;;
	o) OUTPUT_DIR=$OPTARG ;;
	p) CLUSTER=1 ;;
	v) version ;;
	h) help ;;
	\?)
	     echo "Invalid option: -$OPTARG" >&2
	     usage
	     exit 1
	     ;;
	 :)
	     echo "Option -$OPTARG requires an argument." >&2
	     usage
	     exit 1
	     ;;
    esac
done



if [[ -z $INPUT || -z $CONFIG ]]; then
    usage
    exit
fi


################################ check valid STEPs #####
############################
AVAILABLE_STEP_ARRAY=("demplx_fastq" "trimming" "mapping" "after_mapping" "aggr_signal" "call_peak" "get_mtx" "qc_per_barcode" "call_cell" "clustering" "motif_analysis" "split_bam" "footprint" "report" "preprocess" "preprocess_no_dex" "downstream" "all")


check_s=0
for i in ${AVAILABLE_STEP_ARRAY[@]}; do
	    if [[ "$i" == "$STEP" ]]; then check_s=1; fi
done


if [[ $check_s == 0 ]]; then die "Unknown STEP option (\"-s $s\"). Use $0 --help for usage information."; fi


############################
## make output_dir
############################




if [ $CLUSTER == 0 ]; then
    echo "Run scATAC-pro "${VERSION}

fi


###################################################
##Run scATAC-pro
###################################################



declare -x OUTPUT_DIR
declare -x logDir
mkdir -p $OUTPUT_DIR

logDir=${OUTPUT_DIR}/logs
mkdir -p $logDir

###################################################
##Run scATAC-pro
###################################################

#make --file ${SCRIPTS_PATH}/Makefile INPUT_FILE=$INPUT OUTPUT_DIR=$OUTPUT_DIR $STEP 2>&1
config_sys=${ABS_SOFT_PATH}/configure_system.txt
make --file ${SCRIPTS_PATH}/Makefile INPUT_FILE=$INPUT CONFIG_FILE=$CONFIG CONFIG_SYS=$config_sys $STEP > ${logDir}/$STEP.log 2>&1



