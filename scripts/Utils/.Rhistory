rownames(ann_col)
metaData$rn
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores[, rids])
dim(ann_col)
class(ann_col)
rids
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
ann_col = ann_col[rids, ]
ann_col
length(rids)
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
dim(ann_col)
ann_col[rids, ]
ann_col[1:10, ]
ann_col
class(ann_col)
rids
vlass(rids)
class(rids)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rownames(ann_col)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
ann_col
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores)
sele.zscores[, 1:3]
# resample to reduce memory used
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col0 = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
help(pheatmap)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 10)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 2)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
library(flexmix)
help("flexmix")
aa = nbinomial(100, 1, 0.5)
aa = nbinom(100, 1, 0.5)
aa = nb(100, 1, 0.5)
aa = rbinom(100, 1, 0.5)
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=2, mu = 3))
nn
help("rnbinom")
nn = ifelse(aa == 1, rnbinom(1, scale= 2, mu = 5), rnbinom(1, scale=2, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=3, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=0.5, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, mu = 5), rnbinom(1, prob=0.5, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, size = 5), rnbinom(1, prob=0.5, size = 10))
nn
aa
nn = rnbinom(100, prob=0.4, size = 100)
nn
nn = rnbinom(100, prob=0.4, size = 10)
nn
flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
library(countreg)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
nn
aa = flexmix(nn ~ 1, k = 2)
aa
summary(aa)
plot(aa)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
summary(aa)
parameters(aa)
posterior(aa)
setwd("~/yuw1/scATAC-pro/scripts/Utils")
library(Seurat)
help(FindMarkders)
help(FindMarkers)
ss = readRDS('~/yuw1/run_scATAC-pro/output/downstream_analysis/cellranger/seurat_obj_withCluster.rds')
ss$seurat_cluster = NULL
saveRDS(ss, file='~/yuw1/run_scATAC-pro/output/downstream_analysis/cellranger/seurat_obj_withCluster.rds')
ss$seurat_clusters
tmp = ss$seurat_clusters
as.integer(tmp)
as.character(tmp)
as.character(tmp)[1:20]
(tmp)[1:20]
as.character(tmp)[1:20]
dev = readRDS('~/yuw1/run_scATAC-pro/output/downstream_analysis/FILTER/chromVar_obj.rds')
ss = readRDS('~/yuw1/run_scATAC-pro/output/downstream_analysis/FILTER/seurat_obj_withCluster.rds')
mtx_score = dev@assays$data$deviations
dim(mtx_score)
clusters = data.table('bc' = rownames(ss), 'cluster' = ss@meta.data$seurat_clusters)
library(data.table)
clusters = data.table('bc' = rownames(ss), 'cluster' = ss@meta.data$seurat_clusters)
clusters = data.table('bc' = colnames(ss), 'cluster' = ss@meta.data$seurat_clusters)
clusters$cluster = as.character(clusters$cluster)
cls = unique(clusters$cluster)
cls
res = NULL
features = rownames(mtx_score)
featurs
features
logfc.threshold = 0.25
fdr = 0.05
only.pos = T
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0, 'avg_log2FC' = log2(fcs), 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[pvs.adj <= fdr & abs(log2FC) >= logfc.threshold]
if(only.pos) res0 = res0[log2FC > 0]
res = rbind(res, res0[order(-abs(log2FC)), ])
}
cluster0
dim(mtx1)
dim(mtx2)
clusters
clusters[cluster == '2']
cluster0
dim(mtx1)
names(clusters)[1] = 'barcode'
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0, 'avg_log2FC' = log2(fcs), 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[pvs.adj <= fdr & abs(log2FC) >= logfc.threshold]
if(only.pos) res0 = res0[log2FC > 0]
res = rbind(res, res0[order(-abs(log2FC)), ])
}
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0, 'avg_log2FC' = log2(fcs), 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[pvs.adj <= fdr & abs(avg_log2FC) >= logfc.threshold]
if(only.pos) res0 = res0[avg_log2FC > 0]
res = rbind(res, res0[order(-abs(avg_log2FC)), ])
}
res
res[is.na(avg_log2FC)]
res[is.infinite(avg_log2FC)]
res[cluster=='0']
topn = 10
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0, 'avg_log2FC' = log2(fcs), 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[order(-abs(avg_log2FC)), ]
res0 = res0[pvs.adj <= fdr & abs(avg_log2FC) >= logfc.threshold]
if(only.pos) res0 = res0[avg_log2FC > 0]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'avg_fc' = fcs, 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[order(-abs(avg_fc)), ]
res0 = res0[pvs.adj <= fdr & abs(avg_fc) >= fc.threshold]
if(only.pos) res0 = res0[avg_fc > 0]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
fc.threshold = 1.5
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
fcs = sapply(1:length(features), function(x) mean(mtx1[x, ]+0.1)/mean(mtx2[x, ] + 0.1))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'avg_fc' = fcs, 'pv' = pvs,
'pv_adjust' = pvs.adj)
res0 = res0[order(-abs(avg_fc)), ]
res0 = res0[pvs.adj <= fdr & abs(avg_fc) >= fc.threshold]
if(only.pos) res0 = res0[avg_fc > 0]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
mu1 = sapply(1:length(features), function(x) mean(mtx1[x, ]))
mu2 = sapply(1:length(features), function(x) mean(mtx2[x, ]))
fcs = mu1/mu2
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'avg_fc' = fcs, 'pv' = pvs,
'pv_adjust' = pvs.adj)
if(only.pos) res0 = res0[mu1 > 0]
res0 = res0[order(-abs(avg_fc)), ]
res0 = res0[pvs.adj <= fdr & abs(avg_fc) >= fc.threshold]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
mu1 = sapply(1:length(features), function(x) mean(mtx1[x, ]))
mu2 = sapply(1:length(features), function(x) mean(mtx2[x, ]))
fcs = mu1/mu2
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'avg_fc' = fcs, 'pv' = pvs,
'pv_adjust' = pvs.adj)
if(only.pos) res0 = res0[mu1 > 0]
res0 = res0[order(-abs(avg_fc)), ]
res0 = res0[pv_adjust <= fdr & abs(avg_fc) >= fc.threshold]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
mu1 = sapply(1:length(features), function(x) mean(mtx1[x, ]))
mu2 = sapply(1:length(features), function(x) mean(mtx2[x, ]))
fcs = mu1/mu2
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'mean1' = mu1, 'mean2' = mu2,
'avg_fc' = fcs, 'pv' = pvs,
'pv_adjust' = pvs.adj)
if(only.pos) res0 = res0[mean1 > 0]
res0 = res0[order(-abs(avg_fc)), ]
res0 = res0[pv_adjust <= fdr & abs(avg_fc) >= fc.threshold]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
mu1 = sapply(1:length(features), function(x) mean(mtx1[x, ]))
mu2 = sapply(1:length(features), function(x) mean(mtx2[x, ]))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'mean1' = mu1, 'mean2' = mu2,
'pv' = pvs, 'pv_adjust' = pvs.adj)
if(only.pos) res0 = res0[mean1 > 0]
res0 = res0[order(pv_adjust), ]
res0 = res0[pv_adjust <= fdr]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
res
dev@assays$data$z
rownames(dev@assays$data$z)[1:10]
chromVar.obj = dev
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
library(viridis)
library(chromVAR)
library(BiocParallel)
register(SerialParam())
# Do DA/DE with one cluster vs the rest clusters
# clusters are the data frame with <barcode> <cluster>
do_DA <- function(mtx_score, clusters, test = 'wilcox',
only.pos = T, fdr = 0.05, topn = 10){
clusters$cluster = as.character(clusters$cluster)
cls = unique(clusters$cluster)
res = NULL
features = rownames(mtx_score)
for(cluster0 in cls){
bc0 = clusters[cluster == cluster0]$barcode
mtx1 = mtx_score[, colnames(mtx_score) %in% bc0]
mtx2 = mtx_score[, !colnames(mtx_score) %in% bc0]
mu1 = sapply(1:length(features), function(x) mean(mtx1[x, ]))
mu2 = sapply(1:length(features), function(x) mean(mtx2[x, ]))
pvs = sapply(1:length(features), function(x) wilcox.test(mtx1[x, ], mtx2[x, ])$p.value )
pvs.adj = p.adjust(pvs, method = 'fdr')
res0 = data.table('feature' = features, 'cluster' = cluster0,
'mean1' = mu1, 'mean2' = mu2,
'pv' = pvs, 'pv_adjust' = pvs.adj)
if(only.pos) res0 = res0[mean1 > 0]
res0 = res0[order(pv_adjust), ]
res0 = res0[pv_adjust <= fdr]
if(nrow(res0) > topn) res0 = res0[1:topn, ]
res = rbind(res, res0)
}
return(res)
}
metaData = ss@meta.data
da.res = do_DA(chromVar.obj@assays$data$deviations,
clusters = data.tale('barcode' = rownames(metaData),
'cluster' = metaData$seurat_clusters))
library(data.table)
da.res = do_DA(chromVar.obj@assays$data$deviations,
clusters = data.tale('barcode' = rownames(metaData),
'cluster' = metaData$seurat_clusters))
da.res = do_DA(chromVar.obj@assays$data$deviations,
clusters = data.table('barcode' = rownames(metaData),
'cluster' = metaData$seurat_clusters))
sele.tfs = da.res$features
zscores = chromVar.obj@assays$data$z
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
rnames = rownames(sele.zscores)
rownames(sele.zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_clusters)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table('cluster' = metaData$seurat_clusters)
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
set.seed(2019)
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/6)))
ann_col0 = ann_col[rids, ]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
set.seed(2019)
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/6)))
ann_col0 = ann_col[rids, ]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
sele.zscores[, rids]
dim(sele.zscores)
sele.tfs
da.res
sele.tfs = da.res$feature
zscores = chromVar.obj@assays$data$z
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
rnames = rownames(sele.zscores)
rownames(sele.zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_clusters)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table('cluster' = metaData$seurat_clusters)
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
set.seed(2019)
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/6)))
ann_col0 = ann_col[rids, ]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 6)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = T, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 6)
sele.tfs = da.res$feature
zscores = chromVar.obj@assays$data$z
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
sele.zscores[order(rownames(sele.zscores))]
sele.zscores[order(rownames(sele.zscores)), ]
zscores[sele.tfs, ]
sele.zscores = zscores[sele.tfs, ]
all(rownames(sele.zscores) == sele.tfs)
rnames = rownames(sele.zscores)
rownames(sele.zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_clusters)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table('cluster' = metaData$seurat_clusters)
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
set.seed(2019)
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/6)))
ann_col0 = ann_col[rids, ]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F,
cluster_rows = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 6)
FeaturePlot(ss, reduction = 'umap', features = 'seurat_clusters')
DimPlot(ss, reduction = 'umap', group.by = 'seurat_clusters')
