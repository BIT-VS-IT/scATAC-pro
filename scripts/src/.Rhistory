annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col
zscores = chromVar.obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.frame(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col
rownames(ann_col)
metaData$rn
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores[, rids])
dim(ann_col)
class(ann_col)
rids
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
ann_col = ann_col[rids, ]
ann_col
length(rids)
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
dim(ann_col)
ann_col[rids, ]
ann_col[1:10, ]
ann_col
class(ann_col)
rids
vlass(rids)
class(rids)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rownames(ann_col)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
ann_col
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores)
sele.zscores[, 1:3]
# resample to reduce memory used
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col0 = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
help(pheatmap)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 10)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 2)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
library(flexmix)
help("flexmix")
aa = nbinomial(100, 1, 0.5)
aa = nbinom(100, 1, 0.5)
aa = nb(100, 1, 0.5)
aa = rbinom(100, 1, 0.5)
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=2, mu = 3))
nn
help("rnbinom")
nn = ifelse(aa == 1, rnbinom(1, scale= 2, mu = 5), rnbinom(1, scale=2, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=3, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=0.5, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, mu = 5), rnbinom(1, prob=0.5, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, size = 5), rnbinom(1, prob=0.5, size = 10))
nn
aa
nn = rnbinom(100, prob=0.4, size = 100)
nn
nn = rnbinom(100, prob=0.4, size = 10)
nn
flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
library(countreg)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
nn
aa = flexmix(nn ~ 1, k = 2)
aa
summary(aa)
plot(aa)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
summary(aa)
parameters(aa)
posterior(aa)
help(flexdashbord)
??flexdashbord
setwd("/mnt/isilon/tan_lab/yuw1/scATAC-pro/scripts/Utils")
help(ggsave)
library(ggplot2)
help(ggsave)
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
library(viridis)
library(Seurat)
rm(frags, bc_stat, qc_sele)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
library(viridis)
read_conf <- function(){
system(paste('grep =', params$configure_user, "|grep -v ^# | awk -F= '{print $1}' | awk '{$1=$1;print}' > vrs.txt "))
system(paste('grep =', params$configure_user, "|grep -v ^# | awk -F= '{print $2}' | awk -F# '{print $1}' | awk '{$1=$1;print}' > vls.txt "))
vrs = readLines('vrs.txt')
vls = readLines('vls.txt')
for(i in 1:length(vrs)){
assign(vrs[i], vls[i], envir = .GlobalEnv)
}
system('rm vrs.txt')
system('rm vls.txt')
}
read_conf()
plotEPS = as.logical(plotEPS)
mapping_qc_file = paste0(params$output_dir, '/summary/', OUTPUT_PREFIX, '.',
MAPPING_METHOD, '.MappingStats')
mapping_qc = fread(mapping_qc_file, header = F)
mapping_qc$frac = round(mapping_qc$V2/mapping_qc$V2[1], 3)
mapping_qc$frac = paste0(100*mapping_qc$frac, '%')
kable(mapping_qc, col.names = NULL, format = 'html') %>%
kable_styling("striped", full_width = F, position = 'left')
bc_stat_file = paste0(params$output_dir, '/summary/', OUTPUT_PREFIX, '.',
MAPPING_METHOD, '.qc_per_barcode.txt')
selected_bcs = paste0(params$output_dir, '/filtered_matrix/', CELL_CALLER, '/barcodes.txt')
bc_stat = fread(bc_stat_file)
barcodes = fread(selected_bcs, header = F)$V1
qc_sele = bc_stat[bc %in% barcodes, ]
qc_nonsele = bc_stat[!bc %in% barcodes, ]
fragments_file = paste0(params$output_dir, '/summary/fragments.bed')
frags = fread(fragments_file)
names(frags) = c('chr', 'start', 'end', 'bc', 'ndup')
frags = frags[bc %in% barcodes]
ncells = length(barcodes)
frac.in.cell = paste0(round(sum(frags$ndup)/mapping_qc$V2[1], 3) * 100, '%')
med.frag.per.cell = round(median(qc_sele$total_frags))
frac.uniq = paste0(round(nrow(frags)/sum(frags$ndup), 3) * 100, '%')
cell.table = data.frame(c(CELL_CALLER, paste0(ncells), frac.in.cell, paste0(med.frag.per.cell), frac.uniq))
rownames(cell.table) = c('Cell called by', 'Estimated # of cells', 'Fraction of MAPQ30 in cells',
'Median fragments per cell', 'Library Complexity (non redudant fraction)')
kable(cell.table, row.names = T, col.names = NULL, format = 'html') %>%
kable_styling("striped", full_width = F, position = 'left')
tss_escore_file = paste0(params$output_dir, '/signal/', OUTPUT_PREFIX, '.', MAPPING_METHOD, '.aggregated.mtx.gz')
set.cols = brewer.pal(n=5, name = 'Dark2')
tss.mat = fread(tss_escore_file)
tss.mat = tss.mat[, -c(1:6)]
tss.mat[is.na(tss.mat)] = 0
tss.escore = colSums(tss.mat)
ma <- function(x, n = 10){stats::filter(x, rep(1 / n, n), sides = 2)}
tss.escore = ma(tss.escore)
tss.escore = tss.escore[14:213]
df = data.table(index = 10*(-100:99), escore = tss.escore/tss.escore[1])
p0 <- ggplot(data = df, aes(x = index, y = escore)) + geom_line(size = 1, col = set.cols[1]) +
xlab('Distance to TSS') + ylab('TSS enrichment score(bp)') + theme(legend.title=element_blank(), axis.text = element_text(size = 15), axis.title = element_text(size = 15))
p0
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/tss_enrich.eps')
ggsave(p0, file = pfname, device = 'eps', width = 6, height = 6)
}
qc_sele_df = data.table(frac = c(qc_sele$frac_peak, qc_sele$frac_tss, qc_sele$frac_promoter, qc_sele$frac_enh, qc_sele$frac_mito), 'type' = rep(c('Peaks', 'Tss', 'Promoter', 'Enhancer', 'Mito'), each = nrow(qc_sele)))
p0 <- ggplot(data = qc_sele_df, aes(y = frac, x = type, fill = type)) + ylab('Fraction') +
geom_boxplot(outlier.size = 0.01) +  theme(legend.position = 'none', axis.text = element_text(size = 15), axis.title.x = element_blank(), axis.title.y = element_text(size = 15)) + xlab('')
#ggplotly(p0)
p0
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/overlap_annotation.eps')
ggsave(p0, file = pfname, device = 'eps', width = 6, height = 6)
}
frac_peak = sum(qc_sele$total_frags * qc_sele$frac_peak)/sum(qc_sele$total_frags)
frac_mito = sum(qc_sele$total_frags * qc_sele$frac_mito)/sum(qc_sele$total_frags)
frac_promoter = sum(qc_sele$total_frags * qc_sele$frac_promoter)/sum(qc_sele$total_frags)
frac_enh = sum(qc_sele$total_frags * qc_sele$frac_enhancer)/sum(qc_sele$total_frags)
frac_tss = sum(qc_sele$total_frags * qc_sele$frac_tss)/sum(qc_sele$total_frags)
fracs = data.frame(c(frac_peak, frac_mito, frac_promoter, frac_enh, frac_tss))
row.names(fracs) = c('Fraction in peaks', 'Fraction in mitocondrial chromosome',
'Fraction in promoters', 'Fraction in Enhancers(ENCODE)',
'Fraction in TSS')
colnames(fracs) = 'pr'
fracs$pr = round(fracs$pr, 3)
fracs$pr = paste0(100*fracs$pr, '%')
kable(fracs, row.names = T, col.names = NULL) %>%
kable_styling(full_width = F, position = 'left')
bc_stat[, 'group' := ifelse(bc %in% barcodes, 'cell', 'non-cell')]
p <- ggplot(data = bc_stat, aes(x = total_frags, col = group)) +
geom_density() + scale_x_continuous(trans = 'log10') +
theme(legend.position=c(.1, .9)) +  theme(legend.title=element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15)) + xlab('Total #fragments') + ylab('Density')
p
#ggplotly(p)
library(ggplot2)
library(plotly)
g <- ggplot(data = bc_stat[sample(1:nrow(bc_stat), 15000)], aes(x = total_frags, y = frac_peak, col = group)) + geom_point(size = 0.5) + scale_x_continuous(trans='log10') +
theme(legend.position=c(.9, .9)) +  theme(legend.title=element_blank(),
legend.text = element_text(size=15),
legend.background = NULL,
axis.text = element_text(size = 15),
axis.title = element_text(size = 15)) + xlab('Total #fragments') + ylab('Fraction in Peak')
#ggplotly(g)
g
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/fracInPeak_vs_totalFragments.eps')
ggsave(g, file = pfname, device = 'eps', width = 6, height = 6)
}
frags[, 'isize' := end - start]
frags = frags[sample(1:nrow(frags), 1000000), ]
p1 <- ggplot(data = frags[isize < 800], aes(x = isize)) +
geom_density() + xlab('Insert size') + ylab('Density') +  theme(legend.title=element_blank(), legend.text = element_text(size=15), legend.background = NULL, axis.text = element_text(size = 15), axis.title = element_text(size = 15))
p1
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/dist_insert_size.eps')
ggsave(p1, file = pfname, device = 'eps', width = 6, height = 6)
}
rm(frags)
library(Seurat)
rm(frags, bc_stat, qc_sele)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
cg
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
cg
cg
cg
dev.off()
cg
cg
cg
library(Seurat)
rm(frags, bc_stat, qc_sele)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
library(viridis)
read_conf <- function(){
system(paste('grep =', params$configure_user, "|grep -v ^# | awk -F= '{print $1}' | awk '{$1=$1;print}' > vrs.txt "))
system(paste('grep =', params$configure_user, "|grep -v ^# | awk -F= '{print $2}' | awk -F# '{print $1}' | awk '{$1=$1;print}' > vls.txt "))
vrs = readLines('vrs.txt')
vls = readLines('vls.txt')
for(i in 1:length(vrs)){
assign(vrs[i], vls[i], envir = .GlobalEnv)
}
system('rm vrs.txt')
system('rm vls.txt')
}
read_conf()
plotEPS = as.logical(plotEPS)
mapping_qc_file = paste0(params$output_dir, '/summary/', OUTPUT_PREFIX, '.',
MAPPING_METHOD, '.MappingStats')
mapping_qc = fread(mapping_qc_file, header = F)
mapping_qc$frac = round(mapping_qc$V2/mapping_qc$V2[1], 3)
mapping_qc$frac = paste0(100*mapping_qc$frac, '%')
kable(mapping_qc, col.names = NULL, format = 'html') %>%
kable_styling("striped", full_width = F, position = 'left')
bc_stat_file = paste0(params$output_dir, '/summary/', OUTPUT_PREFIX, '.',
MAPPING_METHOD, '.qc_per_barcode.txt')
selected_bcs = paste0(params$output_dir, '/filtered_matrix/', CELL_CALLER, '/barcodes.txt')
bc_stat = fread(bc_stat_file)
barcodes = fread(selected_bcs, header = F)$V1
qc_sele = bc_stat[bc %in% barcodes, ]
qc_nonsele = bc_stat[!bc %in% barcodes, ]
fragments_file = paste0(params$output_dir, '/summary/fragments.bed')
frags = fread(fragments_file)
names(frags) = c('chr', 'start', 'end', 'bc', 'ndup')
frags = frags[bc %in% barcodes]
ncells = length(barcodes)
frac.in.cell = paste0(round(sum(frags$ndup)/mapping_qc$V2[1], 3) * 100, '%')
med.frag.per.cell = round(median(qc_sele$total_frags))
frac.uniq = paste0(round(nrow(frags)/sum(frags$ndup), 3) * 100, '%')
cell.table = data.frame(c(CELL_CALLER, paste0(ncells), frac.in.cell, paste0(med.frag.per.cell), frac.uniq))
rownames(cell.table) = c('Cell called by', 'Estimated # of cells', 'Fraction of MAPQ30 in cells',
'Median fragments per cell', 'Library Complexity (non redudant fraction)')
kable(cell.table, row.names = T, col.names = NULL, format = 'html') %>%
kable_styling("striped", full_width = F, position = 'left')
tss_escore_file = paste0(params$output_dir, '/signal/', OUTPUT_PREFIX, '.', MAPPING_METHOD, '.aggregated.mtx.gz')
set.cols = brewer.pal(n=5, name = 'Dark2')
tss.mat = fread(tss_escore_file)
tss.mat = tss.mat[, -c(1:6)]
tss.mat[is.na(tss.mat)] = 0
tss.escore = colSums(tss.mat)
ma <- function(x, n = 10){stats::filter(x, rep(1 / n, n), sides = 2)}
tss.escore = ma(tss.escore)
tss.escore = tss.escore[14:213]
df = data.table(index = 10*(-100:99), escore = tss.escore/tss.escore[1])
p0 <- ggplot(data = df, aes(x = index, y = escore)) + geom_line(size = 1, col = set.cols[1]) +
xlab('Distance to TSS') + ylab('TSS enrichment score(bp)') + theme(legend.title=element_blank(), axis.text = element_text(size = 15), axis.title = element_text(size = 15))
p0
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/tss_enrich.eps')
ggsave(p0, file = pfname, device = 'eps', width = 6, height = 6)
}
qc_sele_df = data.table(frac = c(qc_sele$frac_peak, qc_sele$frac_tss, qc_sele$frac_promoter, qc_sele$frac_enh, qc_sele$frac_mito), 'type' = rep(c('Peaks', 'Tss', 'Promoter', 'Enhancer', 'Mito'), each = nrow(qc_sele)))
p0 <- ggplot(data = qc_sele_df, aes(y = frac, x = type, fill = type)) + ylab('Fraction') +
geom_boxplot(outlier.size = 0.01) +  theme(legend.position = 'none', axis.text = element_text(size = 15), axis.title.x = element_blank(), axis.title.y = element_text(size = 15)) + xlab('')
#ggplotly(p0)
p0
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/overlap_annotation.eps')
ggsave(p0, file = pfname, device = 'eps', width = 6, height = 6)
}
frac_peak = sum(qc_sele$total_frags * qc_sele$frac_peak)/sum(qc_sele$total_frags)
frac_mito = sum(qc_sele$total_frags * qc_sele$frac_mito)/sum(qc_sele$total_frags)
frac_promoter = sum(qc_sele$total_frags * qc_sele$frac_promoter)/sum(qc_sele$total_frags)
frac_enh = sum(qc_sele$total_frags * qc_sele$frac_enhancer)/sum(qc_sele$total_frags)
frac_tss = sum(qc_sele$total_frags * qc_sele$frac_tss)/sum(qc_sele$total_frags)
fracs = data.frame(c(frac_peak, frac_mito, frac_promoter, frac_enh, frac_tss))
row.names(fracs) = c('Fraction in peaks', 'Fraction in mitocondrial chromosome',
'Fraction in promoters', 'Fraction in Enhancers(ENCODE)',
'Fraction in TSS')
colnames(fracs) = 'pr'
fracs$pr = round(fracs$pr, 3)
fracs$pr = paste0(100*fracs$pr, '%')
kable(fracs, row.names = T, col.names = NULL) %>%
kable_styling(full_width = F, position = 'left')
bc_stat[, 'group' := ifelse(bc %in% barcodes, 'cell', 'non-cell')]
p <- ggplot(data = bc_stat, aes(x = total_frags, col = group)) +
geom_density() + scale_x_continuous(trans = 'log10') +
theme(legend.position=c(.1, .9)) +  theme(legend.title=element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15)) + xlab('Total #fragments') + ylab('Density')
p
#ggplotly(p)
library(ggplot2)
library(plotly)
g <- ggplot(data = bc_stat[sample(1:nrow(bc_stat), 15000)], aes(x = total_frags, y = frac_peak, col = group)) + geom_point(size = 0.5) + scale_x_continuous(trans='log10') +
theme(legend.position=c(.9, .9)) +  theme(legend.title=element_blank(),
legend.text = element_text(size=15),
legend.background = NULL,
axis.text = element_text(size = 15),
axis.title = element_text(size = 15)) + xlab('Total #fragments') + ylab('Fraction in Peak')
#ggplotly(g)
g
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/fracInPeak_vs_totalFragments.eps')
ggsave(g, file = pfname, device = 'eps', width = 6, height = 6)
}
frags[, 'isize' := end - start]
frags = frags[sample(1:nrow(frags), 1000000), ]
p1 <- ggplot(data = frags[isize < 800], aes(x = isize)) +
geom_density() + xlab('Insert size') + ylab('Density') +  theme(legend.title=element_blank(), legend.text = element_text(size=15), legend.background = NULL, axis.text = element_text(size = 15), axis.title = element_text(size = 15))
p1
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/dist_insert_size.eps')
ggsave(p1, file = pfname, device = 'eps', width = 6, height = 6)
}
rm(frags)
library(Seurat)
rm(frags, bc_stat, qc_sele)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
library(Seurat)
rm(bc_stat, qc_sele)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
library(Seurat)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
library(Seurat)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
}
cg
library(Seurat)
down.dir = paste0(params$output_dir, '/downstream_analysis/', CELL_CALLER)
seurat_file = paste0(down.dir, '/seurat_obj_withCluster.rds')
if(file.exists(seurat_file)){
ss = readRDS(seurat_file)
cg <- DimPlot(ss, reduction = 'umap', group.by = 'active_clusters', label = T) + scale_color_brewer(palette = "Paired") + theme(legend.text = element_text(size = 17))
if(plotEPS){
pfname = paste0(params$output_dir, '/summary/umap_clusters.eps')
ggsave(cg, file = pfname, device = 'eps', width = 6, height = 6)
}
cg
}
