## load seurat object with cluster information
seurat.obj = readRDS(output_dir, '/seurat_obj_withCluster.rds')
## load seurat object with cluster information
seurat.obj = readRDS(output_dir, 'seurat_obj_withCluster.rds')
dir(output_dir)
## load seurat object with cluster information
seurat.obj = readRDS(paste0(output_dir, '/seurat_obj_withCluster.rds'))
variability <- computeVariability(obj)
plotVariability(variability, use_plotly = FALSE)
variability
class(variability)
names(variability)
head(variability)
variability = data.table(variability)
library(data.table)
variability = data.table(variability)
variability
setkey(variability, -variability)
setkey(variability, variability)
variabi
variability
tail(variability)
tail(variability, 20)
tail(variability, 30)
tail(variability, 40)
obj@assays$data$z
rownames(obj@assays$data$z)[1:10]
help("computeVariability")
variability = variability[order(-variability), ]
head(variability)
## plot enriched TFs in heatmap
sele.tfs = variability$name[1:20]
sele.tfs
## check enriched TFs for each cluster
variability <- computeVariability(obj)
variability = variability[order(-variability), ]
variability = data.table(variability, stringsAsFactors = F)
variability = variability[order(-variability), ]
variability
## check enriched TFs for each cluster
variability <- computeVariability(obj)
dim(variability)
variability = data.table(variability, stringsAsFactors = F)
variability = variability[order(-variability), ]
variability
## plot enriched TFs in heatmap
sele.tfs = variability$name[1:20]
sele.tfs
help("data.table")
## plot enriched TFs in heatmap
sele.tfs = as.character(variability$name[1:20])
sele.tfs
zscores = obj@assays$data$z
rownames(zscores)[1:10]
rnames = rownames(zscores)
rownames(zscore) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[1])
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[1])
rwonames(zscores)
rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
rownames(zscores)
sele.zscores = zscores[rownames(zscore) %in% sele.tfs, ]
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
sele.zscoreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeees
sele.zscores
pheatmap::pheatmap(zscores)
pheatmap::pheatmap(zscores, cluster_cols = F)
pheatmap::pheatmap(zscores, cluster_cols = F, show_colnames = F)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F)
pheatmap::pheatmap(sele.zscores, cluster_cols = T, show_colnames = F)
seurat.obj@meta.data$seurat_cluster
metaData = data.table(metaData, keep.rownames = T)
metaData = seurat.obj@meta.data
metaData = data.table(metaData, keep.rownames = T)
metaData
class(metaData$seurat_cluster)
names(metaData)
sele.zscores = sele.zscores[, metaData$rn]
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F)
pheatmap::pheatmap(zscores[, metaData$rn], cluster_cols = F, show_colnames = F)
colnames(sele.zscores)
colnames(sele.zscores)[1:10]
metaData$rn[1:10]
all(colnames(sele.zscores) == metaData$rn)
library(pheatmap)
help("pheatmap")
ann_col = data.table(cname = colnames(sele.zscores), cluster = metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
ann_col = data.table(cname = colnames(sele.zscores), cluster = metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
ann_col
sele.zscores = sele.zscores[, metaData$rn]
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table(cname = colnames(sele.zscores), cluster = metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
ann_colors = list(metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = metaData$seurat_cluster )
dim(sele.zscores)
length(metaData$seurat_cluster)
ann_col = data.table( cluster = metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
ann_col = data.table(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = rownames(sele.zscores)
ann_colors = list(metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
ann_col
rownames(ann_col) = metaData$rn
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
dev.off()
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(500))
library(viridis)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(500))
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(500))
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
sele.tfs = as.character(variability$name[1:40])
zscores = obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = seurat.obj@meta.data
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
ann_colors = list(metaData$seurat_cluster)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
hue_pal()(length(identities))
library(scales)
hue_pal()(length(identities))
hue_pal()(6)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color =  hue_pal()(6))
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors =  hue_pal()(6))
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
sele.tfs = as.character(variability$name[1:50])
zscores = obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = seurat.obj@meta.data
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
ann_colors = list(metaData$seurat_cluster)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
png(paste0(output_dir, '/top50_TFs_chromVAR_zscore.heatmap.png'),
width = 300 * 8, height = 300 * 10, res = 300)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
dev.off()
png(paste0(output_dir, '/top50_TFs_chromVAR_zscore.heatmap.png'),
width = 300 * 8, height = 300 * 10, res = 300)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
dev.off()
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
knitr::include_graphics(paste0(params$downstream_dir, '/top50_TFs_chromVAR_zscore.heatmap.png'))
knitr::include_graphics(paste0(params$downstream_dir, '/top50_TFs_chromVAR_zscore.heatmap.png'))
postscript(paste0(output_dir, '/top50_TFs_chromVAR_zscore.heatmap.eps'),
width = 8, height = 8)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
dev.off()
pdf(paste0(output_dir, '/top50_TFs_chromVAR_zscore.heatmap.pdf'),
width = 8, height = 8)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
dev.off()
pdf(paste0(output_dir, '/top50_TFs_chromVAR_zscore.heatmap.pdf'),
width = 8, height = 8)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
dev.off()
## check enriched TFs for each cluster
chromvar.obj = readRDS(paste0(params$downstream_dir, '/*chromVar*.rds'))
## check enriched TFs for each cluster
chromvar.obj = readRDS(paste0(params$downstream_dir, '/chromVar_obj.rds'))
variability <- computeVariability(obj)
variability = data.table(variability, stringsAsFactors = F)
variability = variability[order(-variability), ]
## plot enriched TFs in heatmap
sele.tfs = as.character(variability$name[1:50])
zscores = obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = seurat.obj@meta.data
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
ann_colors = list(metaData$seurat_cluster)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100))
library(Seurat)
rm(frags, bc_stat, qc_sele)
ss = readRDS(paste0(params$downstream_dir, '/seurat_obj_withCluster.rds'))
cg <- DimPlot(ss, label = T, reduction = 'umap')
cg
cg + hue_pal()(6)
cg + scale_color_manual(value = hue_pal()(6))
cg + scale_color_manual(values = hue_pal()(6))
help(DimPlot)
cg <- DimPlot(ss, label = T, reduction = 'umap', do.return = F)
cg + scale_color_manual(values = hue_pal()(6))
cg
cg <- DimPlot(ss, label = T, reduction = 'umap')
cg + scale_color_brewer(palette="Dark2")
cg + scale_color_brewer(palette="Set2")
cg + scale_color_brewer(palette="Set3")
cg + scale_color_brewer(palette="Paired")
cg + scale_color_brewer(palette="Set1")
cg + scale_color_brewer(palette="Dark2")
fg <- FeaturePlot(ss, features = 'nCount_ATAC', reduction = 'umap') + ggtitle('')
#ggplotly(fg)
fg
#ggplotly(fg)
fg + scale_color_brewer(palette = "Blues")
#ggplotly(fg)
fg + scale_color_brewer(palette = "Dark2")
#ggplotly(fg)
fg + scale_color_brewer(palette = "Dark2")
#ggplotly(fg)
fg
help("FeaturePlot")
ctypes = c(levels(metaData@seurat_cluster))
ss
ctypes = c(levels(metaData$seurat_cluster))
ctypes
ctypes = brewer.pal(n=6, name = 'Dark2')
ctypes
names(ctypes) = level(metaData$seurat_cluster)
names(ctypes) = levels(metaData$seurat_cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100), annotation_colors = list(ctypes))
ann_col
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list(cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_colors
ann_colors = list('cluster' = cluster)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rids = sample(1:ncol(sele.zscores), 1000)
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
tail(zscores)
zscores
dim(zscores)
library(flexdashboard)
library(data.table)
library(magrittr)
library(kableExtra)
library(RColorBrewer)
library(ggplot2)
library(plotly)
ss = readRDS(paste0(params$downstream_dir, '/seurat_obj_withCluster.rds'))
library(viridis)
library(chromVAR)
library(BiocParallel)
register(SerialParam())
metaData = ss@meta.data
rm(ss)
chromVar.obj = readRDS(paste0(params$downstream_dir, '/chromVar_obj.rds'))
variability <- computeVariability(chromVar.obj)
variability = data.table(variability, stringsAsFactors = F)
variability = variability[order(-variability), ]
## plot enriched TFs in heatmap
sele.tfs = as.character(variability$name[1:50])
zscores = chromVar.obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.table(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col
zscores = chromVar.obj@assays$data$z
rnames = rownames(zscores)
rownames(zscores) = sapply(rnames, function(x) unlist(strsplit(x, '_'))[2])
sele.zscores = zscores[rownames(zscores) %in% sele.tfs, ]
metaData = data.table(metaData, keep.rownames = T)
setkey(metaData, seurat_cluster)
sele.zscores = sele.zscores[, metaData$rn]
ann_col = data.frame(cluster = metaData$seurat_cluster)
colnames(ann_col) = 'cluster'
rownames(ann_col) = metaData$rn
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col
rownames(ann_col)
metaData$rn
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores[, rids])
dim(ann_col)
class(ann_col)
rids
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
ann_col = ann_col[rids, ]
ann_col
length(rids)
ann_col = data.frame('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
ann_col
dim(ann_col)
ann_col[rids, ]
ann_col[1:10, ]
ann_col
class(ann_col)
rids
vlass(rids)
class(rids)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rownames(ann_col)
sele.zscores[sele.zscores > 10] = 10
sele.zscores[sele.zscores < -10] = -10
cluster = brewer.pal(n=6, name = 'Dark2')
names(cluster) = levels(metaData$seurat_cluster)
ann_colors = list('cluster' = cluster)
# resample to reduce memory used
rids = sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4))
ann_col = ann_col[rids, ]
ann_col
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
rownames(ann_col)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
dim(sele.zscores)
sele.zscores[, 1:3]
# resample to reduce memory used
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
ann_col = data.table('cluster' = metaData$seurat_cluster)
rownames(ann_col) = metaData$rn
rids = sort(sample(1:ncol(sele.zscores), floor(ncol(sele.zscores)/4)))
ann_col0 = ann_col[rids, ]
rownames(ann_col) = colnames(sele.zscores)[rids]
rownames(ann_col0) = colnames(sele.zscores)[rids]
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors)
pheatmap::pheatmap(sele.zscores, cluster_cols = F, show_colnames = F,
annotation_col = ann_col, color = viridis(100),
annotation_colors = ann_colors)
help(pheatmap)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 10)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 8)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 2)
pheatmap::pheatmap(sele.zscores[, rids], cluster_cols = F, show_colnames = F,
annotation_col = ann_col0, color = viridis(100),
annotation_colors = ann_colors, fontsize_row = 7)
library(flexmix)
help("flexmix")
aa = nbinomial(100, 1, 0.5)
aa = nbinom(100, 1, 0.5)
aa = nb(100, 1, 0.5)
aa = rbinom(100, 1, 0.5)
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=2, mu = 3))
nn
help("rnbinom")
nn = ifelse(aa == 1, rnbinom(1, scale= 2, mu = 5), rnbinom(1, scale=2, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=3, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, size= 2, mu = 5), rnbinom(1, size=0.5, mu = 3))
nn
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, mu = 5), rnbinom(1, prob=0.5, mu = 3))
nn = ifelse(aa == 1, rnbinom(1, prob= 0.1, size = 5), rnbinom(1, prob=0.5, size = 10))
nn
aa
nn = rnbinom(100, prob=0.4, size = 100)
nn
nn = rnbinom(100, prob=0.4, size = 10)
nn
flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
library(countreg)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
nn
aa = flexmix(nn ~ 1, k = 2)
aa
summary(aa)
plot(aa)
aa = flexmix(nn ~ 1, k = 2, model = FLXMRnegbin())
summary(aa)
parameters(aa)
posterior(aa)
help(flexdashbord)
??flexdashbord
setwd("/mnt/isilon/tan_lab/yuw1/scATAC-pro/scripts/Utils")
