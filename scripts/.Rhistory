library(data.table)
dd = fread('/mnt/isilon/tan_lab/yuw1/R_work_dir/LiMACC_Dev/HiChIP_H3K27ac/NaiveCD4T/PMID27863249_PCHiC_peak_matrix_cutoff5.tsv')
dd
dd[naCD4 >=5]
dd[naCD4 >5]
dd1 = dd[naCD4 >5]
dd1[baitChr ==oeChr]
dd2 = fread('/home/yuw1/Downloads/DATA_S1/PMID27863249_PCHiC_vs_rCHiC_peak_matrix.tsv')
dd2
getwd()
library(slingshot)
library(monocle)
help("reduceDimension")
getwd*
()
getwd()
BiocManager::install("SC3", version = "3.8")
#devtools::install_github(repo = 'satijalab/seurat', ref = 'release/3.0')
library(Seurat)
packageVersion('Seurat')
install.packages("rjags")
library(rjags)
library(Seurat)
library(Biobase)
library(irlba)
mtx = fread('/mnt/isilon/tan_lab/uzuny/projects/cptca/pilot/dna_met/data/hg19/matrix/leuk/bin_size_100k/combined.rate_CG.whole_genome.good_quality.bed.txt')
library(data.table)
mtx = fread('/mnt/isilon/tan_lab/uzuny/projects/cptca/pilot/dna_met/data/hg19/matrix/leuk/bin_size_100k/combined.rate_CG.whole_genome.good_quality.bed.txt')
dim(mtx)
getwd()
class(mtx)
rownames(mtx)[1:10]
colnames(mtx)
mtx = read.table('/mnt/isilon/tan_lab/uzuny/projects/cptca/pilot/dna_met/data/hg19/matrix/leuk/bin_size_100k/combined.rate_CG.whole_genome.good_quality.bed.txt')
class(mtx)
rownames(mtx)
mtx[,1]
mtx[1,]
setwd("~/yuw1/scATAC-pro/scripts")
frags.file = '~/yuw1/run_scATAC-pro/filtered.fragments.bed'
library(data.table)
frags = fread(frags.file, select=1:4, header = F)
frags
chr0 = 'chr22'
region_file='~/yuw1/run_scATAC-pro/peaks.bed'
regions = fread(region.file, select=1:3, header = F)
names(frags) = c('chr', 'start', 'end', 'bc')
setkey(frags, chr, start)
names(regions) = c('chr', 'start', 'end')
setkey(regions, chr, start)
regions = fread(region_file, select=1:3, header = F)
names(regions) = c('chr', 'start', 'end')
setkey(regions, chr, start)
library(Rcpp)
sourceCpp('getOverlaps.cpp')
sourceCpp('getOverlaps.cpp')
sourceCpp('getOverlaps.cpp')
regions0 = regions[chr == chr0]
frags0 = frags[chr == chr0]
dim(regions0)
dim(frags0)
regions0
readsInRegion = getOverlap_read2region(frags0, regions0)
readsInRegion = getOverlaps_read2region(frags0, regions0)
sourceCpp('getOverlaps.cpp')
readsInRegion = getOverlaps_read2region(frags0, regions0)
readsInRegion
sum(readsInRegion)
nrow(frags0)
length(which(readsInRegion>0))
frags0[, 'region' := readsInRegion]
frags0 = frags0[region != 0]
nrow(frags0)
regions0[, 'rname' := paste(chr, start, end, sep = '-')]
frags0[, 'region' := regions0$rname[region]]
frags0
region.file='~/yuw1/run_scATAC-pro/peaks.bed'
regions = fread(region.file, select=1:3, header = F)
names(regions) = c('chr', 'start', 'end')
setkey(regions, chr, start)
chrs = unique(regions$chr)
fragsInRegion = NULL
for(chr0 in chrs){
regions0 = regions[chr == chr0]
frags0 = frags[chr == chr0]
readsInRegion = getOverlaps_read2region(frags0, regions0)
frags0[, 'region' := readsInRegion]
frags0 = frags0[region != 0]
regions0[, 'rname' := paste(chr, start, end, sep = '-')]
frags0[, 'region' := regions0$rname[region]]
fragsInRegion = rbind(fragsInRegion, frags0)
}
fragsInRegion
# get barcode region count matrix
mat = subset(fragsInRegion, select = c('bc', 'region'))
mat
setkye(mat, bc, region)
setkey(mat, bc, region)
mat[, 'count' := .N, by = list(bc, region)]
mat
summary(mat$count)
length(unique(mat$region))
length(unique(mat$bc))
library(Matrix)
# covert to sparse matrix
smat = sparseMatrix(i = mat$region, j = mat$bc, mat$count)
# covert to sparse matrix
smat = sparseMatrix(i = mat$region, j = mat$bc, x = mat$count)
mat
# covert to sparse matrix
features = sort(unique(mat$region))
bcs = sort(unique(mat$bc))
mat$rowID = match(mat$region, features)
mat$colID = match(mat$bc, bcs)
mat
features[130]
features[135770]
smat = sparseMatrix(i = mat$rowID, j = mat$colID, x = mat$count)
dim(smat)
object.size(smat)
object.size(smat)/10^9
object.size(mat)/10^9
smat
rownames(smat)
colnames(smat)
class(smat)
sum(smat)
sum(mat$count)
nrow(frags)
mat = mat[!duplicated(mat)]
dim(mat)
sum(mat$count)
features = sort(unique(mat$region))
bcs = sort(unique(mat$bc))
mat$rowID = match(mat$region, features)
mat$colID = match(mat$bc, bcs)
smat = sparseMatrix(i = mat$rowID, j = mat$colID, x = mat$count)
dim(smat)
length(features)
length(bcs)
mtx = mat
rm(mat)
smat = sparseMatrix(i = mtx$rowID, j = mtx$colID, x = mtx$count,
dimnames = list(features, bcs))
smat
rownames(smat)[1:10]
colnames(smat)[1:10]
out.mtx.file = '~/yuw1/run_scATAC-pro/output/raw_matrix/rwa_peak_bc.mtx'
writeMM(smat, file = out.mtx.file)
class(frags$start)
frags
dd0 = frags[chr == chr2]
dd0 = frags[chr == 'chr2']
all(dd0$start == sort(dd0$start))
curr_dir = system('dirname $0')
curr_dir
print(curr_dir)
dirname(sys.frame(1)$ofile)
curr_dir = getwd()
curr_dir
system.getCurrentDirectory()
scr_dir <- dirname(sys.frame(1)$ofile)
sys.frame()
system('dirname $0')
system('echo system('dirname $0'))
library(here)
file.path()
install.packages('here')
library(here)
her()
here()
getwd()
thisfile()
thisfile()
dr_here()
library(rstudioapi)
curr_dir=rstudioapi::getActiveDocumentContext()$path
curr_dir
curr_dir=rstudioapi::getActiveDocumentContext()
rstudioapi::getActiveDocumentContext()
curr_dir=rstudioapi::getActiveDocumentContext()$path
curr_dir = dirname(curr_dir)
curr_dir
sourceDir <- getSrcDirectory(function(dummy) {dummy})
sourceDir
help("source")
sourceCpp('getOverlaps.cpp', chdir = T)
help(sourceCpp)
getSrcDirectory(function(x) {x})
getScriptPath <- function(){
cmd.args <- commandArgs()
m <- regexpr("(?<=^--file=).+", cmd.args, perl=TRUE)
script.dir <- dirname(regmatches(cmd.args, m))
if(length(script.dir) == 0) stop("can't determine script dir: please call the script with Rscript")
if(length(script.dir) > 1) stop("can't determine script dir: more than one '--file' argument detected")
return(script.dir)
}
getScriptPath()
system(`dirname $0`)
system("dirname $0")
system('pwd')
system('pwd')
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
IntegerVector getOverlaps_read2region(DataFrame reads, DataFrame regions) {
NumericVector start1 = reads["start"];
NumericVector end1 = reads["end"];
NumericVector start2 = regions["start"];
NumericVector end2 = regions["end"];
int n1 = start1.size(), n2 = start2.size();
NumericVector midP1(n1), len1(n1), len2(n2), midP2(n2);
IntegerVector over1(n1);
len1 = (end1 - start1)/2;
midP1 = (end1 + start1)/2;
len2 = (end2 - start2)/2;
midP2 = (end2 + start2)/2;
int k = 0;
for(int i=0; i<n1; i++){
over1[i] = 0;
for(int j=k; j<n2; j++){
if((fabs(midP1[i] - midP2[j]) <= (len1[i]+len2[j]))){
over1[i] = j + 1;
k = j;
break;
}
}
}
return(over1);
}
'
)
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
IntegerVector getOverlaps_read2region(DataFrame reads, DataFrame regions) {
NumericVector start1 = reads["start"];
NumericVector end1 = reads["end"];
NumericVector start2 = regions["start"];
NumericVector end2 = regions["end"];
int n1 = start1.size(), n2 = start2.size();
NumericVector midP1(n1), len1(n1), len2(n2), midP2(n2);
IntegerVector over1(n1);
len1 = (end1 - start1)/2;
midP1 = (end1 + start1)/2;
len2 = (end2 - start2)/2;
midP2 = (end2 + start2)/2;
int k = 0;
for(int i=0; i<n1; i++){
over1[i] = 0;
for(int j=k; j<n2; j++){
if((fabs(midP1[i] - midP2[j]) <= (len1[i]+len2[j]))){
over1[i] = j + 1;
k = j;
break;
}
}
}
return(over1);
}'
)
sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector getOverlaps_read2region(DataFrame reads, DataFrame regions) {
NumericVector start1 = reads["start"];
NumericVector end1 = reads["end"];
NumericVector start2 = regions["start"];
NumericVector end2 = regions["end"];
int n1 = start1.size(), n2 = start2.size();
NumericVector midP1(n1), len1(n1), len2(n2), midP2(n2);
IntegerVector over1(n1);
len1 = (end1 - start1)/2;
midP1 = (end1 + start1)/2;
len2 = (end2 - start2)/2;
midP2 = (end2 + start2)/2;
int k = 0;
for(int i=0; i<n1; i++){
over1[i] = 0;
for(int j=k; j<n2; j++){
if((fabs(midP1[i] - midP2[j]) <= (len1[i]+len2[j]))){
over1[i] = j + 1;
k = j;
break;
}
}
}
return(over1);
}'
)
parent.frame(2)$ofile
help("writeMM")
tmp='tmp.txt'
dirname(tmp)
library(optparse)
help(add_option)
## filtering barcodes given some cutoffs
library(optparse)
library(data.table)
## get input options
parse = OptionParser()
parser <- add_option(parser, c("-bs", "--bc_stat_file"), type="character", default='fragments.bed',
help="barcodes with summary stat file [default %default]")
parser <- add_option(parser, c("-tp", "--total_pairs"), type="integer", default=100,
help="minimal of total pairs per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fk", "--frac_in_peak"), type="double", default=0.1,
help="minimal fraction of total pairs in peaks per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-ft", "--frac_in_tss"), type="double", default=0,
help="minimal fraction of total pairs overlapping with tss per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fe", "--frac_in_enhancer"), type="double", default=0,
help="minimal fraction of total pairs in enhancer regions per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fp", "--frac_in_promoter"), type="double", default=0,
help="minimal fraction of total pairs in tss per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fm", "--frac_in_mito"), type="double", default=0,
help="minimal fraction of total pairs in Mitocondrial per barcode [default %default]",
metavar="number")
opt = parse_args(parser)
## read summary qc table
qc_bc_stat = fread(opt$bs)
cut.mito = opt$fm
## filtering barcodes given some cutoffs
library(optparse)
library(data.table)
## get input options
parser = OptionParser()
parser <- add_option(parser, c("-bs", "--bc_stat_file"), type="character", default='fragments.bed',
help="barcodes with summary stat file [default %default]")
parser <- add_option(parser, c("-tp", "--total_pairs"), type="integer", default=100,
help="minimal of total pairs per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fk", "--frac_in_peak"), type="double", default=0.1,
help="minimal fraction of total pairs in peaks per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-ft", "--frac_in_tss"), type="double", default=0,
help="minimal fraction of total pairs overlapping with tss per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fe", "--frac_in_enhancer"), type="double", default=0,
help="minimal fraction of total pairs in enhancer regions per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fp", "--frac_in_promoter"), type="double", default=0,
help="minimal fraction of total pairs in tss per barcode [default %default]",
metavar="number")
parser <- add_option(parser, c("-fm", "--frac_in_mito"), type="double", default=0,
help="minimal fraction of total pairs in Mitocondrial per barcode [default %default]",
metavar="number")
opt = parse_args(parser)
## read summary qc table
qc_bc_stat = fread(opt$bs)
cut.mito = opt$fm
opt
firter_barcode.R --help
